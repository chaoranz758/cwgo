layouts:
  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}
      {{- if .UseApacheThrift}}
      replace github.com/apache/thrift => github.com/apache/thrift v0.13.0
      {{- end}}

  - path: biz/router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }
      
  - path: biz/dal/init.go
    delims:
      - ""
      - ""
    body: |-
      package dal

      import (
      	"{{.GoModule}}/biz/dal/mysql"
      	"{{.GoModule}}/biz/dal/redis"
      )

      func Init() {
      	redis.Init()
      	mysql.Init()
      }

  - path: biz/dal/mysql/init.go
    delims:
      - ""
      - ""
    body: |-
      package mysql

      import (
      	"{{.GoModule}}/conf"
      	"gorm.io/driver/mysql"
      	"gorm.io/gorm"
      )

      var (
      	DB  *gorm.DB
      	err error
      )

      func Init() {
      	DB, err = gorm.Open(mysql.Open(conf.GetConf().MySQL.DSN),
      		&gorm.Config{
      			PrepareStmt:            true,
      			SkipDefaultTransaction: true,
      		},
      	)
      	if err != nil {
      		panic(err)
      	}
      }

  - path: biz/dal/redis/init.go
    delims:
      - ""
      - ""
    body: |-
      package redis

      import (
      	"context"

      	"github.com/redis/go-redis/v9"
      	"{{.GoModule}}/conf"
      )

      var RedisClient *redis.Client

      func Init() {
      	RedisClient = redis.NewClient(&redis.Options{
      		Addr:     conf.GetConf().Redis.Address,
      		Username: conf.GetConf().Redis.Username,
      		Password: conf.GetConf().Redis.Password,
      		DB:       conf.GetConf().Redis.DB,
      	})
      	if err := RedisClient.Ping(context.Background()).Err(); err != nil {
      		panic(err)
      	}
      }

  - path: readme.md
    delims:
      - ""
      - ""
    body: |-
      # *** Project

      ## introduce

      - Use the [Hertz](https://github.com/cloudwego/hertz/) framework
      - Integration of pprof, cors, recovery, access_log, gzip and other extensions of Hertz.
      - Generating the base code for unit tests.
      - Provides basic profile functions.
      - Provides the most basic MVC code hierarchy.

      ## Directory structure

      |  catalog   | introduce  |
      |  ----  | ----  |
      | conf  | Configuration files |
      | main.go  | Startup file |
      | hertz_gen  | Hertz generated model |
      | biz/handler  | Used for request processing, validation and return of response. |
      | biz/service  | The actual business logic. |
      | biz/dal  | Logic for operating the storage layer |
      | biz/route  | Routing and middleware registration |
      | biz/utils  | Wrapped some common methods |

      ## How to run

      ```shell
      sh build.sh
      sh output/bootstrap.sh
      ```

  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml

  - path: biz/utils/resp.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package utils

      import (
      	"context"

      	"github.com/cloudwego/hertz/pkg/app"
      )

      // SendErrResponse  pack error response
      func SendErrResponse(ctx context.Context, c *app.RequestContext, code int, err error) {
      	// todo edit custom code
      	c.String(code, err.Error())
      }

      // SendSuccessResponse  pack success response
      func SendSuccessResponse(ctx context.Context, c *app.RequestContext, code int, data interface{}) {
      	// todo edit custom code
      	c.JSON(code, data)
      }

  - path: build.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      RUN_NAME={{.ServiceName}}
      mkdir -p output/bin output/conf
      cp script/bootstrap.sh output 2>/dev/null
      chmod +x output/bootstrap.sh
      cp -r conf/* output/conf
      go build -o output/bin/${RUN_NAME}

  - path: script/bootstrap.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      CURDIR=$(cd $(dirname $0); pwd)
      BinaryName={{.ServiceName}}
      echo "$CURDIR/bin/${BinaryName}"
      exec $CURDIR/bin/${BinaryName}